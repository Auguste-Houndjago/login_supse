generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Utilisateur principal du système
model User {
  id             String    @id @default(uuid()) // Identifiant unique
  email          String    @unique              // Email unique
  nom            String                        // Nom de famille
  prenom         String                        // Prénom
  avatarUrl      String?                       // URL de l'avatar (optionnel)
  telephone      String                        // Numéro de téléphone
  dateNaissance  DateTime                      // Date de naissance
  adresse        String   
  age            Int?
  role           Role      @default(PATIENT)    // Rôle de l'utilisateur (PATIENT par défaut)
  meta           Json?                         // Métadonnées additionnelles (optionnel)
  createdAt      DateTime  @default(now()) @map("created_at") // Date de création

  patient        Patient?                      // Lien vers le profil patient (optionnel)
  medecin        Medecin?                      // Lien vers le profil médecin (optionnel)
}

// Profil Patient lié à un utilisateur
model Patient {
  id        String   @id @default(uuid())       // Identifiant unique du patient
  userId    String   @unique @map("user_id")

  meta      Json?                              // Métadonnées patient (optionnel)

  user      User     @relation(fields: [userId], references: [id]) // Relation avec User
  rendezVous RendezVous[]                      // Rendez-vous du patient
}

// Profil Médecin lié à un utilisateur
model Medecin {
  id             String    @id @default(uuid()) // Identifiant unique du médecin
  userId         String    @unique @map("user_id") // Référence à l'utilisateur
  specialite     String                        // Spécialité médicale
  description    String?                       // Description du médecin (optionnel)
  indisponibilites Json?                       // Périodes d'indisponibilité (optionnel)
  meta           Json?                         // Métadonnées médecin (optionnel)

  user           User      @relation(fields: [userId], references: [id]) // Relation avec User
  rendezVous     RendezVous[]                    // Rendez-vous du médecin
  disponibilites Disponibilite[]                 // Disponibilités du médecin

  @@map("medecins")
}

// Disponibilités d'un médecin
model Disponibilite {
  id         String   @id @default(uuid())      // Identifiant unique
  medecinId  String   @map("medecin_id")       // Référence au médecin
  jour       String                            // Jour de la semaine ou date
  heureDebut DateTime                          // Heure de début
  heureFin   DateTime                          // Heure de fin
  meta       Json?                             // Métadonnées (optionnel)

  medecin    Medecin  @relation(fields: [medecinId], references: [id]) // Relation avec Medecin

  @@map("disponibilites")
}

// Rendez-vous entre patient et médecin
model RendezVous {
  id            String   @id @default(uuid())
  patientId     String   @map("patient_id")
  medecinId     String   @map("medecin_id")
  typeId        String   @map("type_id")

  dateDebut     DateTime
  dateFin       DateTime?
  motif         String
  statut        Statut   @default(en_attente)
  historique    Json?
  meta          Json?
  createdAt     DateTime @default(now()) @map("created_at")

  type          TypeRendezVous @relation(fields: [typeId], references: [id])
  patient       Patient        @relation(fields: [patientId], references: [id])
  medecin       Medecin        @relation(fields: [medecinId], references: [id])

  @@map("rendez_vous")
}


// Type de rendez-vous
model TypeRendezVous {
  id        String   @id @default(uuid())
  nom       String   @unique      // ex: "Consultation"
  code      String   @unique      // ex: "consultation"
  couleur   String?               // ex: "#00b894" (pour affichage calendrier)
  description String?             // utile pour UI/UX ou tri avancé
  createdAt DateTime @default(now())

  rendezVous RendezVous[]
}

// Enumération des rôles utilisateurs
enum Role {
  PATIENT    // Utilisateur patient
  MEDECIN    // Utilisateur médecin
  ADMIN      // Administrateur
  SECRETAIRE // Secrétaire
}

// Enumération des statuts de rendez-vous
enum Statut {
  en_attente     // Rendez-vous en attente de validation
  confirme       // Rendez-vous confirmé
  annule         // Rendez-vous annulé
  termine        // Rendez-vous terminé
}
